/**
 * generated by Xtext 2.14.0
 */
package ac.soton.xeventb.camillex.formatting2;

import ac.soton.xeventb.camillex.services.EventBComponentGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eventb.emf.core.AbstractExtension;
import org.eventb.emf.core.machine.Action;
import org.eventb.emf.core.machine.Event;
import org.eventb.emf.core.machine.Guard;
import org.eventb.emf.core.machine.Machine;
import org.eventb.emf.core.machine.Parameter;
import org.eventb.emf.core.machine.Witness;

@SuppressWarnings("all")
public class EventBComponentFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EventBComponentGrammarAccess _eventBComponentGrammarAccess;
  
  protected void _format(final Machine machine, @Extension final IFormattableDocument document) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field variant is undefined for the type Machine"
      + "\nformat cannot be resolved");
  }
  
  protected void _format(final Event event, @Extension final IFormattableDocument document) {
    EList<AbstractExtension> _extensions = event.getExtensions();
    for (final AbstractExtension abstractExtension : _extensions) {
      document.<AbstractExtension>format(abstractExtension);
    }
    EList<Witness> _witnesses = event.getWitnesses();
    for (final Witness witness : _witnesses) {
      document.<Witness>format(witness);
    }
    EList<Action> _actions = event.getActions();
    for (final Action action : _actions) {
      document.<Action>format(action);
    }
    EList<Guard> _guards = event.getGuards();
    for (final Guard guard : _guards) {
      document.<Guard>format(guard);
    }
    EList<Parameter> _parameters = event.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
  }
  
  public void format(final Object machine, final IFormattableDocument document) {
    if (machine instanceof Machine) {
      _format((Machine)machine, document);
      return;
    } else if (machine instanceof Event) {
      _format((Event)machine, document);
      return;
    } else if (machine instanceof XtextResource) {
      _format((XtextResource)machine, document);
      return;
    } else if (machine instanceof EObject) {
      _format((EObject)machine, document);
      return;
    } else if (machine == null) {
      _format((Void)null, document);
      return;
    } else if (machine != null) {
      _format(machine, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(machine, document).toString());
    }
  }
}
